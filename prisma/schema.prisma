// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./safety-admin.db"
}

model Worker {
  id                Int      @id @default(autoincrement())
  name              String
  birthDate         DateTime @map("birth_date")
  equipmentId       String   @unique @map("equipment_id")
  workField         String   @map("work_field")
  affiliation       String
  healthPrecautions String?  @map("health_precautions")
  mobilePhone       String?  @map("mobile_phone")
  emergencyContact  String?  @map("emergency_contact")
  profileImage      String?  @map("profile_image")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  proximityAlerts   ProximityAlert[]

  @@map("workers")
}

model Administrator {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  passwordHash String   @map("password_hash")
  name         String
  role         String   @default("admin")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  @@map("administrators")
}

model Sensor {
  id        Int      @id @default(autoincrement())
  sensorId  String   @unique @map("sensor_id")
  name      String
  type      String
  location  String
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sensors")
}

model CCTV {
  id        Int      @id @default(autoincrement())
  cameraId  String   @unique @map("camera_id")
  name      String
  location  String
  ipAddress String   @map("ip_address")
  status    String   @default("active")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("cctv")
}

model MonitoringLog {
  id        Int      @id @default(autoincrement())
  type      String
  sourceId  String   @map("source_id")
  message   String
  severity  String   @default("info")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([createdAt])
  @@index([severity])
  @@index([type])
  @@map("monitoring_logs")
}

model Beacon {
  id          Int      @id @default(autoincrement())
  beaconId    String   @unique @map("beacon_id")
  name        String
  macAddress  String   @map("mac_address")
  uuid        String
  major       Int
  minor       Int
  txPower     Int      @map("tx_power")
  location    String?
  gatewayId   String   @map("gateway_id")
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  gateway     Gateway  @relation(fields: [gatewayId], references: [gatewayId])
  proximityAlerts ProximityAlert[]
  rssiCalibrations RssiCalibration[]

  @@map("beacons")
}

model Gateway {
  id          Int      @id @default(autoincrement())
  gatewayId   String   @unique @map("gateway_id")
  name        String
  location    String
  ipAddress   String?  @map("ip_address")
  mqttTopic   String?  @map("mqtt_topic")
  status      String   @default("active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  beacons Beacon[]
  proximityAlerts ProximityAlert[]
  rssiCalibrations RssiCalibration[]

  @@map("gateways")
}

model ProximityAlert {
  id          Int      @id @default(autoincrement())
  beaconId    String   @map("beacon_id")
  gatewayId   String   @map("gateway_id")
  workerId    Int?     @map("worker_id")
  rssi        Int
  distance    Float
  threshold   Float    @default(5.0) // 5m 기본값
  isAlert     Boolean  @default(false) @map("is_alert")
  alertTime   DateTime? @map("alert_time")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  beacon      Beacon   @relation(fields: [beaconId], references: [beaconId])
  gateway     Gateway  @relation(fields: [gatewayId], references: [gatewayId])
  worker      Worker?  @relation(fields: [workerId], references: [id])

  @@index([createdAt])
  @@index([isAlert])
  @@index([beaconId, gatewayId])
  @@map("proximity_alerts")
}

model RssiCalibration {
  id        Int      @id @default(autoincrement())
  beaconId  String   @map("beacon_id")
  gatewayId String   @map("gateway_id")
  distance  Float
  rssi      Int
  samples   Int      @default(1)
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  beacon    Beacon   @relation(fields: [beaconId], references: [beaconId])
  gateway   Gateway  @relation(fields: [gatewayId], references: [gatewayId])

  @@unique([beaconId, gatewayId, distance])
  @@map("rssi_calibration")
}

model LogRetentionPolicy {
  id          Int      @id @default(autoincrement())
  logType     String   @map("log_type") // "monitoring", "proximity", "system"
  severity    String   @default("all") // "error", "warning", "info", "debug", "all"
  retentionDays Int    @map("retention_days") // 보존 기간 (일)
  isActive    Boolean  @default(true) @map("is_active")
  lastCleanup DateTime? @map("last_cleanup")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@unique([logType, severity])
  @@map("log_retention_policies")
}

model SurveillanceRecord {
  id          Int      @id @default(autoincrement())
  type        String   // "safety_equipment", "fire_explosion", "gas_leak"
  title       String   // 알람 제목
  message     String   // 상세 메시지
  location    String   // 감지 위치 (예: "A동 4번 센서", "LPG 저장소", "작업장 내 LPG 배관")
  severity    String   @default("warning") // "info", "warning", "danger", "critical"
  status      String   @default("active") // "active", "resolved", "acknowledged"
  source      String   @default("cctv") // "cctv", "sensor", "manual"
  metadata    String?  // JSON 형태의 추가 정보
  resolvedAt  DateTime? @map("resolved_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@index([createdAt])
  @@index([type])
  @@index([severity])
  @@index([status])
  @@map("surveillance_records")
}

// 비상 상황 SOP (Standard Operating Procedure)
model EmergencySOP {
  id          Int      @id @default(autoincrement())
  type        String   // "lpg_gas_leak", "safety_equipment", "crane_worker", "lpg_explosion"
  name        String   // SOP 이름
  description String?  // SOP 설명
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  steps       EmergencySOPStep[]
  incidents   EmergencyIncident[]

  @@map("emergency_sops")
}

// 비상 상황 SOP 단계
model EmergencySOPStep {
  id          Int      @id @default(autoincrement())
  sopId       Int      @map("sop_id")
  stepNumber  Int      @map("step_number")
  title       String   // 단계 제목
  description String   // 단계 설명
  action      String?  // 취해야 할 조치
  isRequired  Boolean  @default(true) @map("is_required")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  sop         EmergencySOP @relation(fields: [sopId], references: [id], onDelete: Cascade)
  executions  EmergencyStepExecution[]

  @@map("emergency_sop_steps")
}

// 비상 상황 발생 기록
model EmergencyIncident {
  id          Int      @id @default(autoincrement())
  sopId       Int      @map("sop_id")
  type        String   // 비상 상황 유형
  title       String   // 상황 제목
  description String?  // 상황 설명
  location    String?  // 발생 위치
  severity    String   @default("high") // "low", "medium", "high", "critical"
  status      String   @default("active") // "active", "in_progress", "completed", "cancelled"
  startedAt   DateTime @default(now()) @map("started_at")
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  sop         EmergencySOP @relation(fields: [sopId], references: [id])
  executions  EmergencyStepExecution[]

  @@map("emergency_incidents")
}

// 비상 상황 단계별 실행 기록
model EmergencyStepExecution {
  id          Int      @id @default(autoincrement())
  incidentId  Int      @map("incident_id")
  stepId      Int      @map("step_id")
  stepNumber  Int      @map("step_number")
  status      String   @default("pending") // "pending", "completed", "skipped"
  executedAt  DateTime? @map("executed_at")
  notes       String?  // 실행 노트
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  incident    EmergencyIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  step        EmergencySOPStep @relation(fields: [stepId], references: [id])

  @@map("emergency_step_executions")
}

// 비상사태대비및대응 PDF 파일 관리
model EmergencyPDF {
  id          Int      @id @default(autoincrement())
  fileName    String   @map("file_name")
  originalName String  @map("original_name")
  filePath    String   @map("file_path")
  fileSize    Int      @map("file_size")
  mimeType    String   @map("mime_type")
  description String?  // 파일 설명
  version     String   @default("1.0") // 버전 정보
  isActive    Boolean  @default(true) @map("is_active") // 활성 파일 여부
  uploadedBy  String   @map("uploaded_by") // 업로드한 사용자
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("emergency_pdfs")
}

// CCTV 스트림 관리
model CctvStream {
  id          Int      @id @default(autoincrement())
  name        String   // 스트림 이름 (예: "A동 출입구")
  description String?  // 설명
  streamUrl   String   @map("stream_url") // HLS 스트림 URL
  location    String?  // 위치 정보
  isActive    Boolean  @default(true) @map("is_active") // 활성 상태
  order       Int      @default(1) // 표시 순서
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("cctv_streams")
}

// 가스 센서 데이터 (대량 데이터 처리를 위한 최적화된 구조)
model GasSensorData {
  id        Int      @id @default(autoincrement())
  sensorId  String   @map("sensor_id") // 센서 ID (예: "A_1", "B_5")
  building  String   // 건물 (A, B)
  value     Float    // 센서 값 (PPM)
  level     String   // 위험도 레벨 (GAS_SAFE, GAS_WARNING, GAS_DANGER, GAS_CRITICAL)
  timestamp DateTime // 측정 시간
  createdAt DateTime @default(now()) @map("created_at")

  // 인덱스 추가 (성능 최적화)
  @@index([building, timestamp])
  @@index([sensorId, timestamp])
  @@index([timestamp])
  @@map("gas_sensor_data")
}

// 가스 센서 매칭 관리
model GasSensorMapping {
  id          Int      @id @default(autoincrement())
  sensorId    String   @unique @map("sensor_id") // 센서 ID (예: "A_1", "B_5")
  building    String   // 건물 (A, B)
  isActive    Boolean  @default(true) @map("is_active") // 활성 상태
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("gas_sensor_mappings")
}
